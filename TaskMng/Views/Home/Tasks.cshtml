@model IEnumerable<TaskMng.Models.TaskView>

<p>
    <br />
    <a href="#" class="oi oi-plus" title="Create new task" data-toggle="modal" data-target="#addTaskModal" aria-hidden="true" onclick="showAssignees(@ViewBag.ManagerId , '#assignee-create-task')">
        Create new task
    </a>
</p>

<table class="table">
    <tr>
        <th></th>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>

        @if (ViewBag.TeamTasksView)
        {
            <th>
                @Html.DisplayNameFor(model => model.Assignee)
            </th>
        }
        else
        {
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
        }

        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Progress)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
    <tr id="task@(item.Id)" data-task-id="@(item.Id)">
        <td>
            <a id="iconshow-subtask" href="#" class="oi oi-collapse-right" title="Show subtasks" onclick="showSubtasks(@item.Id)" aria-hidden="true"></a>
            <a id="iconhide-subtask" href="#" class="oi oi-collapse-down collapse" title="Hide subtasks" onclick="hideSubtasks(@item.Id)" aria-hidden="true"></a>
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>

        @if (ViewBag.TeamTasksView)
        {
            <td>
                @Html.DisplayFor(modelItem => item.Assignee.Name)
            </td>
        }
        else
        {
            <td>
                @Html.DisplayFor(modelItem => item.Author.Name)
            </td>
        }

        <td>
            <select onchange="setNewStatus(@item.Id)" data-status="@(item.Status.Name)"></select>
        </td>
        <td>
            <div class="progress">
                <div class="progress-bar progress-bar-striped active" role="progressbar"
                     aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width:@item.Progress%">
                    @item.Progress%
                </div>
            </div>
        </td>
        <td>
            <a href="#" title="Details" class="oi oi-info" onclick="details(@item.Id)" data-toggle="modal" data-target="#myModalDetailsTask" aria-hidden="true"></a>
            <a href="#" title="Edit" class="oi oi-pencil" onclick="editTask(@item.Id)" data-toggle="modal" data-target="#myModalEditTask" aria-hidden="true"></a>
            <a href="#" title="Delete" class="oi oi-trash" onclick="deleteTask(@item.Id)" aria-hidden="true"></a>
        </td>
    </tr>
        //add component that will change with partial view???
    }

</table>

<div id="addTaskModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="addTaskModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="addTaskModalTitle" class="modal-title">Add Task</h5>
                <button class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-control" id="create-task">
                    <div class="form-group">
                        <label for="task-name">Name:</label>
                        <input id="task-name" type="text" class="form-control">
                    </div>
                    @if (ViewBag.TeamTasksView)
                     {
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="span-assignee">Assignee</span>
                            </div>
                            <select id="assignee-create-task" aria-describedby="span-assignee">
                                @*<option selected></option>*@
                            </select>
                        </div>
                     }
                    <div class="form-group">
                        <label for="task-comment">Comment:</label>
                        <textarea id="task-comment" class="form-control"></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" data-dismiss="modal">Close</button>
                <button id="add-task" class="btn btn-primary">Save task</button>
            </div>
        </div>
    </div>
</div>

<div id="myModalDetailsTask" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="taskDetailsModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="taskDetailsModalTitle" class="modal-title">Task Details</h5>
                <button class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="detailOfTask"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="myModalEditTask" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="editTaskModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="editTaskModalTitle" class="modal-title">Edit Task</h5>
                <button class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="EditTaskId"></span>
                <div class="form" id="edit-form">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="save-task" class="btn btn-primary" data-dismiss="modal" onclick="saveEditTask('#assignee-edit')" disabled>Save task</button>
            </div>
        </div>
    </div>
</div>

<script>
    function showStatuses(id) {
        $.ajax({
            url: "@Url.Action("GetStatuses", "Home")",
            method: "GET"
        })
        .done(function (data) {
            var status = $("#status" + id);
            status.html(data);
            status.val(status.data("status"));
        });
    }

    function setNewStatus(taskId) {
        var statusName = $("#task" + taskId + " select").val();
        $.ajax({
            url: "@Url.Action("SetNewStatus", "Home")",
            method: "POST",
            data: { id: taskId, status: statusName }
        })
        .done(function () {
             if (@ViewBag.TeamTasksView.ToString().ToLower()) {
                $("#myTeamTasksBtn").click();
            }
            else {
                $("#myTasksBtn").click();
            }
        });
    }

    function saveParentTaskId(parentId) {
        $("#add-task").data("parentTaskId", parentId);
        $("#assignee-create-task").prop("hidden", parentId);
        $("#span-assignee").prop("hidden", parentId);
        $("#span-assignee").data("add-subtask", true);
    }

    function editTask(taskId) {
        $.ajax({
            url: "@Url.Action("EditTask", "Home")",
            method: "POST",
            data: { id: taskId }
        })
        .done(function (data) {
            $("#edit-form").html(data);
            $("#save-task").data("editTaskId", taskId);
        })
        .fail(function () {
            $("#edit-form").html("<p>Cannot find task</p>");
        });
    }

    function saveEditTask(selector) {
        var task = {
            Id: $("#save-task").data("editTaskId"),
            Name: $("#nameEditTask").val(),
            Assignee: $(selector).val(),
            ETA: $("#timepicker2").val(),
            DueDate: $("#timepicker3").val(),
            Comment: $("#comment").val(),
        };

        $.ajax({
            url: "@Url.Action("SaveEditTask", "Home")",
            method: "POST",
            data: { taskForEdit: task },
        })
        .done(function (message) {
            alert(message);
              if (@ViewBag.TeamTasksView.ToString().ToLower()) {
                $("#myTeamTasksBtn").click();
            }
            else {
                $("#myTasksBtn").click();
            }
        })
        .fail(function () {
            alert("Cannot find task");
        });
    }


    function details(mainId) {
        $.ajax({
            url: "@Url.Action("Details", "Home")",
            method: "GET",
            data: { id: mainId },
        })
        .done(function (data) {
            $("#detailOfTask").html(data);
        })
        .fail(function () {
            alert("Cannot find the task");
        });
    }

    function addTask(selector) {
       
        $.ajax({
            url: "@Url.Action("CreateTask", "Home")",
            method: "POST",
            data: {
                parentId: $("#add-task").data("parentTaskId"),
                templateId: null,
                assignee: $(selector).val(),
                name: $("#task-name").val(),
                comment: $("#task-comment").val()
            }
        })
        .done(function (message) {
            
            alert(message);
            
            if (@ViewBag.TeamTasksView.ToString().ToLower()) {
                $("#myTeamTasksBtn").click();
            }
            else {
                $("#myTasksBtn").click();
            }
        })
        .fail(function () {
            alert("Cannot add the task!");
        });
    }

    function deleteTask(taskId) {
        $.ajax({
            url: "@Url.Action("DeleteTask", "Home")",
            method: "POST",
            data: { id: taskId }
        })
        .done(function () {
            alert("Task has been deleted.");
            $("#task" + taskId).remove();
        })
        .fail(function () {
            alert("Cannot delete the task!");
        });
    }

    function showSubtasks(taskId) {
        $.ajax({
            url: "@Url.Action("ShowSubtask", "Home")",
            method: "GET",
            data: { parentId: taskId }
        })
        .done(function (data) {
            var taskRow = $("#task" + taskId);
            taskRow.after(data);

            $("#iconshow-subtask", taskRow).hide();
            $("#iconhide-subtask", taskRow).show();

            getStatuses(function (statuses) {
                setStatuses(statuses, taskRow.next().find("select"));
            });
        })
    }

    function hideSubtasks(taskId) {
        var taskRow = $('#task' + taskId);
        taskRow.next().remove();
        $("#iconhide-subtask", taskRow).hide();
        $("#iconshow-subtask", taskRow).show();
    }

    function setStatuses(statuses, selects) {
        selects.html(statuses);
        $.each(selects, function () {
            var $this = $(this);
            $this.val($this.data("status"));
        });
    }

    function showAssignees(managerId, selector) {
        if (!managerId) {
            return;
        }

        $.ajax({
            url: "@Url.Action("GetAssignees", "Home")",
            method: "GET",
            data: { managerId: managerId }
        })
            .done(function (data) {
                var assignee = $(selector);
                assignee.html(data);
                assignee.val(assignee.data("assignee"));
        });
    }

    function updateAssignee(selector) {
        var assignee = $(selector);
        assignee.data("assignee", assignee.val());
    }

    $(document).ready(function () {
        getStatuses(function (statuses) {
            setStatuses(statuses, $(".table select"));
        });

        $("#edit-form").change(function () {
            if ($("#nameEditTask").val().length > 2) {
                $("#save-task").prop("disabled", false);
            }
        });

        $("#myModalEditMainTask").on("hidden.bs.modal", function (e) {
            $("#save-task").prop("disabled", true);
        });

        $("#task-name").change(function () {

            $("#add-task").prop("disabled", !this.value);
        });

        $("#add-task").on("click", function () {
            var taskName = $("#task-name"),
                assignee = $("#assignee-create-task");
            var selector = "#assignee-create-task";
            if (taskName.val().length<3) {
                taskName.addClass("border-danger");
            }
            else {
                taskName.removeClass("border-danger");
            }

            if (assignee.length) {
                if (!assignee.val()) {
                    assignee.addClass("border-danger");
                }
                else {
                    assignee.removeClass("border-danger");
                }
            }

            if ((taskName.val().length > 2) && (!assignee.length || assignee.val() || $("#span-assignee").data("add-subtask"))) {
                addTask(selector);
                $("#addTaskModal").modal("hide");
            }
        });
    });
</script>
